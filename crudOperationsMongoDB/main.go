package main

import (
	"context"
	"crud/repository"
	"crud/server"
	"log"
	"net/http"
	"net/http/pprof"
	"os"
	rpprof "runtime/pprof"
	"time"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"
)

func startPprof() {
	log.Println("Booting on localhost:8081")
	log.Fatal(http.ListenAndServe(":8081", nil))
}

func main() {
	// Create a mongoDB database connection
	client, err := mongo.NewClient(options.Client().ApplyURI("mongodb://127.0.0.1:27017"))
	if err != nil {
		log.Fatal(err)
	}

	if err := client.Connect(context.TODO()); err != nil {
		log.Fatal(err)
	}

	if err := client.Ping(context.TODO(), readpref.Primary()); err == nil {
		log.Default().Println("Pingged")
	}

	// Create a repository
	repository := repository.NewRepository(client.Database("users"))

	// Create an http server
	server := server.NewServer(repository)

	router := gin.Default()
	{
		router.GET("/users/:email", server.GetUser)
		router.POST("/users", server.CreateUser)
		router.PUT("/users/:email", server.UpdateUser)
		router.DELETE("/users/:email", server.DeleteUser)
		router.GET("/debug/pprof/*pprof", gin.WrapH(http.HandlerFunc(pprof.Index)))
	}

	// Create a profile file to store profile data generated by pprof
	profileFile, err := os.Create("profile.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer profileFile.Close()

	// Create a ticker to for every 5 seconds
	ticker := time.NewTicker(30 * time.Second)
	// Create a go routine to store to profile data
	go func() {
		for {
			select {
			case <-ticker.C:
				if err := rpprof.Lookup("heap").WriteTo(profileFile, 1); err != nil {
					log.Fatalf("Error writing profiling data: %v", err)
				}
			}
		}
	}()

	// Start pprof
	go startPprof()

	// Start the server
	router.Run(":9080")
}
